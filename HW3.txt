CSE 12 Homework 3
Christopher Nies
A11393577
B00
April 15th, 2014

Part 1A
1. True
2. True
3. False
4. False
5. False
6. True
7. False
8. True
9. True
10. False
11. True
12. True
13. True
14. True
15. False
16. True
17. False
18. True

Part 1B
1. Running Time: O(n)
Explanation: A single loop that runs n/2 times, and has one instruction per run
of the loop, so the equation is n/2, and n/2 = O(n).

2. Running Time: O(log2(n)
Explanation: A single loop that iterates log2(n) times, since it multiplies its
cursor by two everytime it runs. log2(n) = O(log2(n))

3. Running Time: O(n^2)
Explanation: A single nested loop, the body of the inner loop itself executed
n times, and then the outer loop is also run n times. So the resulting equation
is roughly 2n^2 + 2n + 1, this comes from the number of times the inner loop's
body is executed (n^2) plus the number of times the inner loops condition
statement is executed (n^2 + n) plus the number of times the outer loop
condition statement is run (n+1). 2n^2 + 2n + 1 = O(n^2)

4. Running Time: O(n)
Explanation: The first loop (body and condition check) is run 2n+1 times, 
as is the second loop. And (assuming the second loop meant j++ instead of i++)
the second loop has the same run time. The whole code then runs 4n + 2 times, 
and 4n + 2 = O(n)

5. Running Time: O(n)
Explanation: This loop's body runs twice as many times as n, so the whole code
plus the condition check runs at 4n + 1, and 4n + 1 = O(n)

6. Running Time: O(n^2)
Explanation: This loop's body executes n*n times, so the whole code runs every
line 2n^2 + 1 times, and 2n^2+1 = O(n^2)

7. Running Time: O(n^3)
Explanation: Another nested loop. The inner loop's body executes n^3 times,
with it's condition check running n^3 + n times. The outer loop's condition runs
n+1 times, so this code executes 2n^3 + 2n + 1 times, and 2n^3 + 2n + 1 = O(n^3)

8. Running Time: O(n)
Explanation: This inner loop's body executes 1000n times, and the inner loops
condition check runs 10001n times. The outer loop condition runs n + 1 times.
So this code executes 20002n + 1 statements, and 2002n + 1 = O(n)

Part 2
1. Running Time: Omega(n)
Explanation: Making a copy of a list requires to create a new list instance(an
operation that runs independent of it's length) and then adding a copy of each 
node to the tail of the list (which runs at roughly 3 times the number of 
elements, since each element needs to be read from the list, then copied, then
added to the new list at the tail). So this takes roughly 3n + 1 steps to 
perform, and 3n +1 = Omega(n)

2. Running Time: Omega(1)
Explanation: Adding an element to the end of the list is easy in a doubly linked
list, since we have access to the tail node and its previous node, which is the
same amount of information to process regardless of length. We need to link the
old final node to the new one, and link the new one to the tail node (each about
two steps regardless of length), and then increment the length of the list (a 
simple operation). This takes about 10 or so steps, and 10=Omega(1)

3. Runing Time: Omega(1)
Explanation: To remove an element we have to disconnect the node from the head
of the list and the element's next node, each taking one step. Then we link the
head to the elements next which takes another 2 steps. Then we set the removed
node to null. So this takes roughly 5 or so steps, and 5 = Omega(1)

4. Running Time: Omega(1)
Explanation: Since this is a doubly linked list, the process is almost identical
to the above process, the only difference being utilizing the tail node and the
node-to-remove's predecessor, rather than the head and the tail-to-remove's
successor. This takes roughly 5 or so steps regardless of length, and
5 = Omega(1)

5. Running Time: Omega(n)
Explanation: In the worst case, the element does not exist in the list. Assuming
the list is not sorted in any way, we have to linearly search the list for the 
element, looking at every single node, getting it's element, and comparing the 
element to the element to search for. Therefore, each node takes about 3 steps,
and with n nodes, to search would take roughly 3n steps. 3n = Omega(n)

Part 3




















